@using DentistryManagement.Shared.ViewModels
@using DentistryManagement.Client.Pages
@using DentistryManagement.Client.Helpers
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net
@using System.Net.Http.Json
@using Microsoft.Extensions.Logging
@inject ILogger<Users> Logger
@inject IModalService Modal
@inject HttpClient Http

<div class="simple-form">
    <EditForm Model="@AddUserViewModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <CustomValidator @ref="customValidator" />
        <ValidationSummary />
        <InputText id="Email" @bind-Value="AddUserViewModel.Email" />
        <InputText id="firstName" @bind-Value="AddUserViewModel.FirstName" />
        <InputText id="lastName" @bind-Value="AddUserViewModel.LastName" />
        <InputText id="PasswordHash" @bind-Value="AddUserViewModel.PasswordHash" />
        <button type="submit" disabled="@disabled">Submit</button>

        <p style="@messageStyles">
            @message
        </p>
    </EditForm>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    private bool disabled;
    private string message;
    private string messageStyles = "visibility:hidden";
    private CreateUserViewModel AddUserViewModel = new CreateUserViewModel();
    private CustomValidator customValidator;

    private async Task HandleValidSubmit()
    {
        customValidator.ClearErrors();

        try
        {
            var response = await Http.PostAsJsonAsync("api/User", AddUserViewModel);

            var errors = await response.Content
                    .ReadFromJsonAsync<Dictionary<string, List<string>>>();

            if (response.StatusCode == HttpStatusCode.BadRequest &&
                  errors.Count() > 0)
            {
                customValidator.DisplayErrors(errors);
            }
            else
            {
                await BlazoredModal.Close(ModalResult.Ok(response));
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            Logger.LogError("Form processing error: {Message}", exception.Message);
            disabled = true;
            messageStyles = "color:red";
            message = "There was an error processing the form.";
        }
    }
}
