@page "/"

@using DentistryManagement.Client.Pages.Home.Components
@using DentistryManagement.Shared.ViewModels.Statistics
@using DentistryManagement.Shared.ViewModels.Affiliates

@inject HttpClient Http

@attribute [Authorize]

<div class="content px-4">
    @if (statistic == null)
    {
        <div class="loader">Loading...</div>
    }
    else
    {
        <AuthorizeView Roles="Admin">
            <div class="row">
                <div class="col-7">
                    <ChartSettings UpdateChartData="UpdateChartData" AffiliateId="@statistic.AffiliateId" Affiliates="affiliates" />
                </div>
            </div>
        </AuthorizeView>

        <br />

        <div class="row">
            <div class="col-3">
                <PatientCountChart PatientCount="@statistic.PatientCount" />
            </div>
            <div class="col-3">
                <TreatmentCountChart TreatmentCount="@statistic.TreatmentCount" />
            </div>
            <div class="col-3">
                <MonthlyEarningsChart MonthlyEarnings="@statistic.MonthlyEarnings" />
            </div>
            <div class="col-3">
                <OverallEarningsChart OverallEarnings="@statistic.OverallEarnings" />
            </div>
        </div>

        <br />

        <div class="row">
            <div class="col-6">
                <MonthlyTreatmentChart MonthlyTreatmentHistory="@statistic.MonthlyTreatmentHistory" />
            </div>
            <div class="col-6">
                <PopularTreatmentChart PopularTreatment="@statistic.PopularTreatment" />
            </div>
        </div>
    }
</div>

@code {
    [CascadingParameter]
    protected MainLayout navigationSet { get; set; }

    private StatisticViewModel statistic;

    private List<AffiliateViewModel> affiliates;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        navigationSet.resetNavigationPanelWithState();

        try
        {
            var user = (await authenticationStateTask).User;

            if (user.IsInRole("Admin"))
            {
                affiliates = await Http.GetFromJsonAsync<List<AffiliateViewModel>>("api/Affiliate");
            }

            statistic = await Http.GetFromJsonAsync<StatisticViewModel>("api/statistic");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void UpdateChartData(StatisticViewModel statisticView)
    {
        statistic = statisticView;
    }
}
