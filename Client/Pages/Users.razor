@page "/users"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using DentistryManagement.Shared.ViewModels
@using DentistryManagement.Client.Modals.Users
@inject HttpClient Http
@inject IModalService Modal

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Email</td>
                    <td>
                        <button type="button" class="btn-primary" @onclick="@(() => Edit(user.Id))">Edit</button>
                        <button type="button" class="btn-danger" @onclick="@(() => Delete(user.Id))">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-success" @onclick="Add">Add</button>
}

@code {
    private List<UserViewModel> users;
    private ModalOptions modalOptions = new ModalOptions() { DisableBackgroundCancel = true };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await Http.GetFromJsonAsync<List<UserViewModel>>("api/User");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task Add()
    {
        var addModal = Modal.Show<CreateUserModal>("Details", modalOptions);

        var result = await addModal.Result;

        if (!result.Cancelled)
        {
            await OnInitializedAsync();
        }
    }

    private async Task Edit(string Id)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(UpdateUserModal.Id), Id);

        var updateModal = Modal.Show<UpdateUserModal>("Details", parameters, modalOptions);

        var result = await updateModal.Result;

        if (!result.Cancelled)
        {
            await OnInitializedAsync();
        }
    }

    private async Task Delete(string Id)
    {
        var result = await Http.DeleteAsync("api/User/" + Id);

        if (result.IsSuccessStatusCode)
        {
            users.RemoveAll(x => x.Id == Id);
        }
    }
}
