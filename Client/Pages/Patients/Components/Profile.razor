@using DentistryManagement.Client.Components
@using DentistryManagement.Shared.ViewModels.Patients;
@using DentistryManagement.Client.Helpers
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net
@using System.Net.Http.Json

@inject ILogger<Patient> Logger
@inject HttpClient Http

<div class="grph-paper">

    <HeaderPanel Title="@(patientViewModel.FirstName + " " + patientViewModel.LastName)"
                 ChangeEditMode="ChangeEditMode"
                 EditMode="@EditMode"
                 Cancel="Cancel"
                 Save="Save"
                 Message="@message"
                 MessageStyle="@messageStyles">
        <EditForm Model="@patientViewModel">
            <DataAnnotationsValidator />
            <CustomValidator @ref="customValidator" />
            <ul class="grph-ul">
                <li class="grph-li">
                    <div class="col-4">
                        <span>First Name:</span>
                    </div>
                    <div class="col-8">
                        <InputText disabled="@(!EditMode)"
                                   class="@InputStyle"
                                   @bind-Value="patientViewModel.FirstName" />
                        <ValidationMessage For="@(() => patientViewModel.FirstName)" />
                    </div>
                </li>
                <li class="grph-li">
                    <div class="col-4">
                        <span>Email:</span>
                    </div>
                    <div class="col-8">
                        <InputText disabled="@(!EditMode)"
                                   class="@InputStyle"
                                   @bind-Value="patientViewModel.Email" />
                        <ValidationMessage For="@(() => patientViewModel.Email)" />
                    </div>
                </li>
            </ul>
            <ul class="grph-ul">
                <li class="grph-li">
                    <div class="col-4">
                        <span>Last Name:</span>
                    </div>
                    <div class="col-8">
                        <InputText disabled="@(!EditMode)"
                                   class="@InputStyle"
                                   @bind-Value="patientViewModel.LastName" />
                        <ValidationMessage For="@(() => patientViewModel.LastName)" />
                    </div>
                </li>
                <li class="grph-li">
                    <div class="col-4">
                        <span>Phone:</span>
                    </div>
                    <div class="col-8">
                        <InputText disabled="@(!EditMode)"
                                   class="@InputStyle"
                                   @bind-Value="patientViewModel.PhoneNumber" />
                        <ValidationMessage For="@(() => patientViewModel.PhoneNumber)" />
                    </div>
                </li>
            </ul>
        </EditForm>
    </HeaderPanel>

</div>


@code {
    [Parameter]
    public int PatientId { get; set; }

    private UpdatePatientViewModel patientViewModel = new UpdatePatientViewModel();

    private bool EditMode = false;

    private string message;

    private string messageStyles = "display:none";

    private CustomValidator customValidator;

    private string InputStyle
    {
        get
        {
            return "form-control " + (!EditMode ? "grph-content-input-disabled" : "grph-content-input");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            patientViewModel = await Http.GetFromJsonAsync<UpdatePatientViewModel>("api/Patient/" + PatientId);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            Logger.LogError("Form processing error: {Message}", exception.Message);
            messageStyles = "display:block";
            message = "There was an error getting the data.";
        }
    }

    private async Task Save()
    {
        customValidator.ClearErrors();

        try
        {
            var response = await Http.PutAsJsonAsync("api/Patient/" + PatientId, patientViewModel);

            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                var errors = await response.Content
                    .ReadFromJsonAsync<Dictionary<string, List<string>>>();

                if (errors.Count > 0)
                {
                    customValidator.DisplayErrors(errors);
                }
            }
            else
            {
                EditMode = false;
                await OnInitializedAsync();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            Logger.LogError("Form processing error: {Message}", exception.Message);
            messageStyles = "display:block";
            message = "There was an error processing the form.";
        }
    }

    private async Task Cancel()
    {
        EditMode = false;
        await OnInitializedAsync();
    }

    private void ChangeEditMode(bool mode)
    {
        EditMode = mode;
    }
}
