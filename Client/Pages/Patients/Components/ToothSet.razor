@using DentistryManagement.Client.Pages.Patients.Components.Interfaces
@using DentistryManagement.Client.Pages.Patients.Modals
@using DentistryManagement.Client.Components
@using DentistryManagement.Shared.ViewModels.Teeth
@using DentistryManagement.Client.Icons 
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Logging

@inject HttpClient Http
@inject ILogger<ToothSet> Logger
@inject IModalService Modal

<div class="grph-paper">
    <Panel Title="Teeth">
        <CascadingValue Value=this>
            @ChildContent
        </CascadingValue>

        <div class="grph-diseases">
            <p class="validation-message" style="@messageStyles">
                @message
            </p>
            @if (diseases != null)
            {
                @foreach (var disease in diseases)
                {
                    <MatCheckbox Label="@disease.Name"
                                 Value="@disease.Active"
                                 ValueChanged="@((bool value) => ToggleDisease(disease, value))"
                                 ValueExpression="@(() => disease.Active)">
                    </MatCheckbox>
                }
            }
        </div>
        <div class="grph-tooh-action">
            <div class="grph-comment-action" @onclick="@View">
                <Comment Class="grph-comment-action-icon" />
                <span class="grph-comment-action-text">
                    @commentsCount Comments
                </span>
            </div>
        </div>
    </Panel>
</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public ITooth ActiveTooth { get; set; }

    private List<ToothDiseaseViewModel> diseases;

    private CreateToothDiseasesViewModel selectedDiseases = new CreateToothDiseasesViewModel();

    private string message;

    private string messageStyles = "display:none";

    private ModalOptions modalOptions = new ModalOptions() { DisableBackgroundCancel = true };

    private int commentsCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            diseases = await Http.GetFromJsonAsync<List<ToothDiseaseViewModel>>("api/disease");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public async Task AddTooth(ITooth tooth)
    {
        if (ActiveTooth == null)
        {
            await SetActiveTooth(tooth);
        }
    }

    public async Task SetActiveTooth(ITooth tooth)
    {
        if (ActiveTooth != tooth)
        {
            ActiveTooth = tooth;
            selectedDiseases.ToothId = ActiveTooth.ToothId;
            try
            {
                selectedDiseases.ToothDiseases = await Http.GetFromJsonAsync<List<ToothDiseaseViewModel>>("api/tooth/" + ActiveTooth.ToothId + "/diseases");
                commentsCount = await Http.GetFromJsonAsync<int>("api/tooth/" + ActiveTooth.ToothId + "/comments-count");
                foreach (var disease in diseases)
                {
                    disease.Active = false;
                    if (selectedDiseases.ToothDiseases.Any(sd => sd.Id.Equals(disease.Id)))
                    {
                        disease.Active = true;
                    }
                }

            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
            StateHasChanged();
        }
    }

    private async Task ToggleDisease(ToothDiseaseViewModel disease, bool value)
    {
        disease.Active = value;

        if (value)
        {
            selectedDiseases.ToothDiseases.Add(disease);
            ActiveTooth.HasActiveDiseases = true;
        }
        else
        {
            selectedDiseases.ToothDiseases.Remove(selectedDiseases.ToothDiseases.Find(sd => sd.Id.Equals(disease.Id)));
            ActiveTooth.HasActiveDiseases = false;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("api/tooth/" + ActiveTooth.ToothId + "/diseases", selectedDiseases);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            Logger.LogError("Form processing error: {Message}", exception.Message);
            messageStyles = "display:block";
            message = "There was an error processing the form.";
        }

        StateHasChanged();
    }

    private async Task View()
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(ActiveTooth.ToothId), ActiveTooth.ToothId);

        var modal = Modal.Show<CommentViewModal>("Tooth's Comments", parameters, modalOptions);

        var result = await modal.Result;

        if (result.Cancelled)
        {
            commentsCount = await Http.GetFromJsonAsync<int>("api/tooth/" + ActiveTooth.ToothId + "/comments-count");
        }
    }
}
