@using DentistryManagement.Client.Components
@using DentistryManagement.Client.Pages.Patients.Modals;
@using DentistryManagement.Shared.ViewModels.Files
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Logging
@using System.IO;

@inject HttpClient Http
@inject ILogger<Allergies> Logger
@inject IModalService Modal

<div class="grph-paper">
    <Panel Title="Files" Class="grph-file-content">
        <p class="validation-message" style="@messageStyles">
            @message
        </p>
        @if (files != null)
        {
    <div class="grph-files">

        @foreach (var file in files)
        {
           
            <div class="grph-thumbnail">
                <div class="grph-thumbnail-container">
                    <div class="grph-thumbnail-img"
                         style="background-image: url(@("images/files/" + file.Path));"
                         @onclick="@(() => View(file))">
                    </div>
                    <div class="grph-thumbnail-content" @onclick="@(() => Delete(file))">
                        <span class="oi oi-trash"></span>
                    </div>
                </div>
            </div>
        }
    </div>
        }
        <div class="mat-file-upload mdc-ripple-surface mdc-ripple-upgraded">
            <InputFile OnChange="HandleSelection" accept="image/*"></InputFile>
            <div class="mat-file-upload-content">
                <span>Drop Or Browse</span>
            </div>
        </div>
    </Panel>
</div>

@code {
    [Parameter]
    public int MedicalChartId { get; set; }

    private string message;

    private string messageStyles = "display:none";

    private List<FileViewModel> files;

    private ModalOptions modalOptions = new ModalOptions() { DisableBackgroundCancel = true };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            files = await Http.GetFromJsonAsync<List<FileViewModel>>("api/MedicalChart/" + MedicalChartId + "/files");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        if (file != null && file.Type.StartsWith("image"))
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            var content = new MultipartFormDataContent
{
                {
                    new ByteArrayContent(ms.GetBuffer()), "file", file.Name
                }
            };

            try
            {
                var response = await Http.PostAsync("api/MedicalChart/" + MedicalChartId + "/Files", content);
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
            catch (Exception exception)
            {
                Logger.LogError("Form processing error: {Message}", exception.Message);
                messageStyles = "display:block";
                message = "There was an error processing the form.";
            }
            finally
            {
                await OnInitializedAsync();
            }
        }
    }

    private async Task Delete(FileViewModel fileView)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(fileView.Id), fileView.Id);
        parameters.Add(nameof(MedicalChartId), MedicalChartId);

        var deleteModal = Modal.Show<DeleteFileModal>("Confirm action", parameters, modalOptions);

        var result = await deleteModal.Result;

        if (!result.Cancelled)
        {
            files.RemoveAll(x => x.Id == fileView.Id);
        }
    }

    private void View(FileViewModel fileView)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(fileView.Path), fileView.Path);

        Modal.Show<ViewFileModal>("File uploaded - " + fileView.UploadDT.ToString("dd/MM/yyyy"), parameters, modalOptions);
    }
}
