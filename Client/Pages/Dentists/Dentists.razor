@page "/dentists"

@using DentistryManagement.Shared.ViewModels.Dentists;
@using DentistryManagement.Client.Pages.Dentists.Modals;
@using DentistryManagement.Client.Components;

@inject HttpClient Http
@inject IModalService Modal

@attribute [Authorize]

<div class="under-top-row px-4">
    <AuthorizeView Roles="Admin, Manager">
        <AddAction Add="Add" />
    </AuthorizeView>    
</div>

<div class="content px-4">
    @if (dentists == null)
    {
        <div class="loader">Loading...</div>
    }
    else
    {
        <div class="grph-paper">
            <table class="grp-table">
                <thead class="grph-table-head">
                    <tr class="grph-table-row">
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Email</th>
                        <th>Phone Number</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var dentist in dentists)
                    {
                        <tr class="grph-table-row">
                            <td>@dentist.FirstName</td>
                            <td>@dentist.LastName</td>
                            <td>@dentist.Email</td>
                            <td>@dentist.PhoneNumber</td>
                            <td class="grph-actions">
                                <AuthorizeView Roles="Admin, Manager">
                                    <span class="oi oi-pencil" @onclick="@(() => Edit(dentist))"></span>
                                    <span class="oi oi-trash" @onclick="@(() => Delete(dentist))"></span>
                                </AuthorizeView>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    [CascadingParameter]
    protected MainLayout navigationSet { get; set; }

    private List<DentistViewModel> dentists;

    private ModalOptions modalOptions = new ModalOptions() { DisableBackgroundCancel = true };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            dentists = await Http.GetFromJsonAsync<List<DentistViewModel>>("api/dentist");
            navigationSet.resetNavigationPanelWithoutState();
            navigationSet.addNavigationItem("Dentists");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }


    private async Task Add()
    {
        var addModal = Modal.Show<CreateDentistModal>("Create Dentist", modalOptions);

        var result = await addModal.Result;

        if (!result.Cancelled)
        {
            await OnInitializedAsync();
        }
    }

    private async Task Edit(DentistViewModel dentistView)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(DentistViewModel.Id), dentistView.Id);

        var updateModal = Modal.Show<UpdateDentistModal>("Details of " + dentistView.Email, parameters, modalOptions);

        var result = await updateModal.Result;

        if (!result.Cancelled)
        {
            await OnInitializedAsync();
        }
    }

    private async Task Delete(DentistViewModel dentistView)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(DentistViewModel.Id), dentistView.Id);

        var deleteModal = Modal.Show<DeleteDentistModal>("Confirm action", parameters, modalOptions);

        var result = await deleteModal.Result;

        if (!result.Cancelled)
        {
            dentists.RemoveAll(x => x.Id == dentistView.Id);
        }
    }
}
