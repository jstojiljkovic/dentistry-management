@using DentistryManagement.Shared.ViewModels.Users;
@using DentistryManagement.Client.Pages.Users
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Json
@using Microsoft.Extensions.Logging
@using DentistryManagement.Shared.ViewModels.Roles
@using DentistryManagement.Shared.ViewModels.Affiliates

@inject ILogger<Users> Logger
@inject IModalService Modal
@inject HttpClient Http

<div class="grph-modal-form">
    <EditForm Model="@UpdateUserViewModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <p class="validation-message" style="@messageStyles">
            @message
        </p>

        <div class="row">
            <div class="col">
                <MatTextField @bind-Value="UpdateUserViewModel.FirstName" Label="First Name" Outlined="true"></MatTextField>
                <ValidationMessage For="@(() => UpdateUserViewModel.FirstName)" />
            </div>
            <div class="col">
                <MatTextField @bind-Value="UpdateUserViewModel.LastName" Label="Last Name" Outlined="true"></MatTextField>
                <ValidationMessage For="@(() => UpdateUserViewModel.LastName)" />
            </div>
        </div>

        <div class="row">
            <div class="col">
                <MatTextField @bind-Value="UpdateUserViewModel.PhoneNumber" Label="Phone Number" Outlined="true"></MatTextField>
                <ValidationMessage For="@(() => UpdateUserViewModel.PhoneNumber)" />
            </div>
        </div>

        <div class="row">
            <div class="col">
                <MatSelect Label="Role" Outlined="true" @bind-Value="UpdateUserViewModel.RoleId">
                    @if (roles != null)
                    {
                        @foreach (var role in roles)
                        {
                            <MatOption Value="@role.Id">@role.Name</MatOption>
                        }
                    }
                </MatSelect>
                <ValidationMessage For="@(() => UpdateUserViewModel.RoleId)" />
            </div>
            <div class="col">
                <MatSelect Label="Affiliate" Outlined="true" @bind-Value="UpdateUserViewModel.AffiliateId">
                    @if (affiliates != null)
                    {
                        @foreach (var affiliate in affiliates)
                        {
                            <MatOption Value="@affiliate.Id">@affiliate.Name</MatOption>
                        }
                    }
                </MatSelect>
                <ValidationMessage For="@(() => UpdateUserViewModel.AffiliateId)" />
            </div>
        </div>

        <br />

        <div class="input-group grph-button-actions">
            <button class="btn btn-primary grph-cancel" @onclick="BlazoredModal.Cancel">Cancel</button>
            <button class="btn btn-primary grph-primary" disabled="@disabled">Update User</button>
        </div>
    </EditForm>
</div>

@code {
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter]
    public string Id { get; set; }

    private bool disabled;

    private string message;

    private string messageStyles = "display:none";

    private UpdateUserViewModel UpdateUserViewModel = new UpdateUserViewModel();

    private List<RoleViewModel> roles;

    private List<AffiliateViewModel> affiliates;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UpdateUserViewModel = await Http.GetFromJsonAsync<UpdateUserViewModel>("api/User/" + Id);
            roles = await Http.GetFromJsonAsync<List<RoleViewModel>>("api/Role");
            affiliates = await Http.GetFromJsonAsync<List<AffiliateViewModel>>("api/Affiliate");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync("api/User/" + Id, UpdateUserViewModel);

            if (response.IsSuccessStatusCode)
            {
                await BlazoredModal.Close(ModalResult.Ok(response));
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            Logger.LogError("Form processing error: {Message}", exception.Message);
            disabled = true;
            messageStyles = "display:block";
            message = "There was an error processing the form.";
        }
    }
}
