@using DentistryManagement.Shared.ViewModels.Diseases;
@using DentistryManagement.Client.Pages.Diseases
@using DentistryManagement.Client.Helpers
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net
@using System.Net.Http.Json
@using Microsoft.Extensions.Logging

@inject ILogger<Diseases> Logger
@inject HttpClient Http

<div class="grph-modal-form">
    <EditForm Model="@diseaseViewModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <CustomValidator @ref="customValidator" />

        <p class="validation-message" style="@messageStyles">
            @message
        </p>

        <div class="row">
            <div class="col">
                <MatTextField @bind-Value="diseaseViewModel.Name" Label="Name" Outlined="true"></MatTextField>
                <ValidationMessage For="@(() => diseaseViewModel.Name)" />
            </div>
        </div>

        <div class="row">
            <div class="col">
                <MatTextField @bind-Value="diseaseViewModel.Description" Label="Description" Outlined="true" TextArea="true" Class="grph-textarea"></MatTextField>
                <ValidationMessage For="@(() => diseaseViewModel.Description)" />
            </div>
        </div>

        <br />

        <div class="input-group grph-button-actions">
            <button class="btn btn-primary grph-cancel" @onclick="BlazoredModal.Cancel">Cancel</button>
            <button class="btn btn-primary grph-primary" disabled="@disabled">Create Disease</button>
        </div>

    </EditForm>
</div>

@code {
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; }

    private bool disabled;

    private string message;

    private string messageStyles = "display:none";

    private CreateDiseaseViewModel diseaseViewModel = new CreateDiseaseViewModel();

    private CustomValidator customValidator;

    private async Task HandleValidSubmit()
    {
        customValidator.ClearErrors();

        try
        {
            var response = await Http.PostAsJsonAsync("api/disease", diseaseViewModel);

            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                var errors = await response.Content
                    .ReadFromJsonAsync<Dictionary<string, List<string>>>();

                if (errors.Count > 0)
                {
                    customValidator.DisplayErrors(errors);
                }
            }
            else
            {
                await BlazoredModal.Close(ModalResult.Ok(response));
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            Logger.LogError("Form processing error: {Message}", exception.Message);
            disabled = true;
            messageStyles = "display:block";
            message = "There was an error processing the form.";
        }
    }
}
