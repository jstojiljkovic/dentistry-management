@page "/calendar"

@using Syncfusion.Blazor.Schedule
@using DentistryManagement.Client.Components

@if (Initializing)
{
    <Loading Name="Loading" />
}

<div class="grph-calendar-content" style="visibility: @Hide">
    <div class="grph-paper">
        <SfSchedule TValue="AppointmentData"
                    Width="100%"
                    Height="800px"
                    @bind-SelectedDate="@CurrentDate"
                    StartHour="08:00" EndHour="20:00">
            <ScheduleWorkHours Highlight="true" Start="08:00" End="20:00"></ScheduleWorkHours>
            <ScheduleQuickInfoTemplates TemplateType="TemplateType.Cell">
                <HeaderTemplate>
                </HeaderTemplate>
                <ContentTemplate>
                </ContentTemplate>
                <FooterTemplate>
                </FooterTemplate>
            </ScheduleQuickInfoTemplates>
            <ScheduleViews>
                <ScheduleView Option="View.Week"></ScheduleView>
                <ScheduleView MaxEventsPerRow="25" Option="View.TimelineWeek"></ScheduleView>
            </ScheduleViews>
            <ScheduleViews>
                <ScheduleView Option="View.Week"></ScheduleView>
            </ScheduleViews>

            <ScheduleEvents TValue="AppointmentData" DataBound="@Created" OnPopupOpen="@OnPopupOpen" />
            <ScheduleEventSettings DataSource="@DataSource"></ScheduleEventSettings>
        </SfSchedule>
    </div>
</div>
    


@code {
    [CascadingParameter]
    protected MainLayout navigationSet { get; set; }

    public View ViewNow = View.Week;

    public class AppointmentData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public string Location { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Description { get; set; }
        public bool IsAllDay { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
        public virtual string ElementType { get; set; }
    }

    List<AppointmentData> DataSource = new List<AppointmentData>
    {
        new AppointmentData { Id = 1, Subject = "Meeting", StartTime = new DateTime(2020, 3, 10, 9, 30, 0) , EndTime = new DateTime(2020, 3, 10, 12, 0, 0) }
    };

    public DateTime CurrentDate = DateTime.Now;

    private bool Initializing = true;

    private string Hide => Initializing ? "hidden" : "visible";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        navigationSet.resetNavigationPanelWithoutState();
        navigationSet.addNavigationItem("Calendar");
    }

    private void Created()
    {
        Initializing = false;
    }

    private void OnPopupOpen(PopupOpenEventArgs<AppointmentData> args)
    {
        if (args.Type == PopupType.Editor)
        {
            args.Cancel = true;
        }
    }
}
